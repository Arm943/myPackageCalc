package main

import (
	"bufio"
	"fmt"
	"io"
	"log"
	"os"
	"strings"
)

// v2.1.1 –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã

var name string
var newName string

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò
// —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
func createFile(name string) {
	file, err := os.Create(name)
	if err != nil {
		logErr("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", err)
		return
	}
	defer file.Close()
	logInfoMsg("‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω:", name)
}

// –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª
func renameFile(name, newName string) {
	err := os.Rename(name, newName)
	if err != nil {
		logErr("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err)
		return
	}
	logInfoMsg("‚úÖ –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:", newName)
}

// –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
func existFile(name string) {
	_, err := os.Stat(name)
	if os.IsNotExist(err) {
		fmt.Println("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", name)
		logInfoMsg("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", name)
	} else {
		logInfoMsg("‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", name)
	}
}

// —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
func deleteFile(name string) {
	err := os.Remove(name)
	if err != nil {
		logErr("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err)
		return
	}
	logInfoMsg("‚úÖ –§–∞–π–ª %s —É–¥–∞–ª–µ–Ω \n", name)
}

// –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–î–ï–†–ñ–ò–ú–´–ú –§–ê–ô–õ–û–í

// –∑–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª
func writeNewText(fileName string, userText string) {
	file, err := os.OpenFile(fileName, os.O_WRONLY|os.O_TRUNC, 0666)
	if err != nil {
		logErr("–û—à–∏–±–∫–∞ –æ—Ç—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:", err)
		return
	}
	defer file.Close()

	_, err = file.Write([]byte(userText))
	if err != nil {
		logErr("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", err)
	}
	logInfoMsg("‚úÖ –í–∞—à —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ", fileName)

}

// —á—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª–µ
func readFile(fileName string) {
	file, err := os.Open(fileName)
	if err != nil {
		logErr("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:", err)
		return
	}
	defer file.Close()

	buf := make([]byte, 1024)
	n, err := file.Read(buf)
	if err != nil && err != io.EOF {
		logErr("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", err)
		return
	}
	fmt.Println("‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
	fmt.Println(string(buf[:n]))
}

// –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ–¥–Ω–æ —Ñ–∞–π–ª–∞ –≤ –¥—Ä—É–≥–æ–π
func copyText(fileOne, fileTwo string) {
	fOne, err := os.Open(fileOne)
	if err != nil {
		logErr("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä—ã—Ç–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞: ", err)
		return
	}
	defer fOne.Close()

	fTwo, err := os.OpenFile(fileTwo, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666)
	if err != nil {
		logErr("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä—ã—Ç–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞: ", err)
		return
	}
	defer fTwo.Close()

	_, err = io.Copy(fTwo, fOne)
	if err != nil {
		logErr("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:", err)
		return
	}

	logTreeInfoMsg("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ %v —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª %v ", fileOne, fileTwo)
}

// –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
func bufScan(fileName string) {
	file, err := os.Open(fileName)
	if err != nil {
		logErr("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä—ã—Ç–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞: ", err)
		return
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		fmt.Println(scanner.Text())
	}
}

// –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ —Å–ª–æ–≤—É
func finder(fileName, text string) {
	file, err := os.Open(fileName)
	if err != nil {
		logErr("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä—ã—Ç–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞: ", err)
		return
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		if strings.Contains(scanner.Text(), text) {
			fmt.Println(scanner.Text())
		}
	}
	if err := scanner.Err(); err != nil {
		logErr("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ", err)
	}
}

func menu() {
	for {
		var userInput string

		fmt.Println()
		fmt.Println(`--------------------------------
üëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
   1Ô∏è‚É£ - —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª 
   2Ô∏è‚É£ - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª
   3Ô∏è‚É£ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª
   4Ô∏è‚É£ - —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
	5Ô∏è‚É£ - –∑–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª
	6Ô∏è‚É£ - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–µ
	7Ô∏è‚É£ - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª
	8Ô∏è‚É£ - –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
	9Ô∏è‚É£ - –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
--------------------------------
üÖæÔ∏è - –≤—ã—Ö–æ–¥
	`)
		fmt.Scan(&userInput)
		logBlackBox(string(userInput))
		switch userInput {
		case "1":
			var name string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ")
			fmt.Scan(&name)
			createFile(name)
			logBlackBox(name)
		case "2":
			var name string
			var newName string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ")
			fmt.Scan(&name)
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ")
			fmt.Scan(&newName)
			renameFile(name, newName)
			logBlackBox(newName)
		case "3":
			var name string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ")
			fmt.Scan(&name)
			existFile(name)
			logBlackBox(name)
		case "4":
			var name string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ")
			fmt.Scan(&name)
			deleteFile(name)
			logBlackBox(name)
		case "5":
			var fileName string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ")
			fmt.Scan(&fileName)
			fmt.Scanln()
			logBlackBox(name)

			fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç: ")
			reader := bufio.NewReader(os.Stdin)
			userText, _ := reader.ReadString('\n')
			userText = strings.TrimSpace(userText)
			writeNewText(fileName, userText)
			logBlackBox(userText)
		case "6":
			var fileName string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ")
			fmt.Scan(&fileName)
			fmt.Println()
			readFile(fileName)
			logBlackBox(fileName)
		case "7":
			var fileOne string
			var fileTwo string

			fmt.Println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –û–¢–ö–£–î–ê —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: ")
			fmt.Scan(&fileOne)
			logBlackBox(fileOne)
			fmt.Println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ö–£–î–ê —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: ")
			fmt.Scan(&fileTwo)
			logBlackBox(fileTwo)
			fmt.Println()
			copyText(fileOne, fileTwo)
		case "8":
			var fileName string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ")
			fmt.Scan(&fileName)
			fmt.Println()
			bufScan(fileName)
			logBlackBox(fileName)
		case "9":
			var fileName string
			var text string

			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ")
			fmt.Scan(&fileName)
			fmt.Println()
			logBlackBox(fileName)
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏: ")
			fmt.Scan(&text)
			fmt.Println()
			logBlackBox(text)

			finder(fileName, text)
		case "0":
			os.Exit(0)
		default:
			log.Println("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é")
		}

	}
}

// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
func logSetOutput() {
	file, err := os.OpenFile("logs.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		log.Fatal(err)
	}
	log.SetOutput(file)
	log.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)
}

//–≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ–≥–æ–≤

func logErr(msg string, err error) {
	log.Println("‚õî[ERROR] :", msg, err)
}
func logInfoMsg(msg, info string) {
	log.Println("[INFO] :", msg, info)
}
func logTreeInfoMsg(msg, info1, info2 string) {
	log.Println("[INFO] :", msg, info1, info2)
}
func logBlackBox(info1 string) { //users experience for analytics
	log.Println("[UX] :", info1)
}

func main() {
	logSetOutput()
	menu()
}

/*
	args := os.Args
	if len(args) < 3 {
		fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: create|rename|check|delete –∏ –Ω—É–∂–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
		return
	}

	command := args[1]

	switch command {
	case "create":
		if len(args) < 3 {
			fmt.Println("–£–∫–∞–∂–∏ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
			return
		}
		createFile(args[2])

	case "rename":
		if len(args) < 4 {
			fmt.Println("–£–∫–∞–∂–∏ —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
			return
		}
		renameFile(args[2], args[3])

	case "check":
		if len(args) < 3 {
			fmt.Println("–£–∫–∞–∂–∏ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
			return
		}
		existFile(args[2])

	case "delete":
		if len(args) < 3 {
			fmt.Println("–£–∫–∞–∂–∏ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
			return
		}
		deleteFile(args[2])

	default:
		fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π: create, rename, check, delete")
	}

}
*/
